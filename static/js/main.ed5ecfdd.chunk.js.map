{"version":3,"sources":["services/cryptography.ts","components/header/header.tsx","services/code.ts","components/pageContainer/pageContainer.tsx","pages/welcome/welcomePage.tsx","navigation/level.tsx","navigation/router.tsx","components/appBar/appBarLeft.tsx","components/appBar/appBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["hash","data","createHash","update","digest","decrypt","cookieLevel","AES","process","toString","enc","Utf8","encrypt","useStyles","makeStyles","theme","header","width","display","justifyContent","marginLeft","typoShare","margin","spacing","menuButton","CustomHeader","classes","useCookies","cookies","setCookie","React","useState","code","setCode","isSuccess","setIsSuccess","nextLevel","setNextLevel","isError","setIsError","to","getRoute","className","Typography","variant","color","level","Box","TextField","autoFocus","size","id","label","onChange","e","target","value","IconButton","edge","aria-label","href","Routes","root","onClick","codeValidation","encryptedLevel","map","Map","set","has","toLowerCase","get","parseInt","isValid","getCodeValidation","console","log","page","flexDirection","alignItems","PageContainer","children","Container","button","WelcomePage","Button","startIcon","Level","stage","RouteNames","level1","uuidv4","level2","cryptedLevel","Router","basename","Link","exact","path","component","AppBarLeft","removeCookie","flexGrow","toolbar","CustomAppBar","AppBar","position","Toolbar","App","CookiesProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed5ecfdd.chunk.js","sourcesContent":["import { createHash } from 'crypto';\nimport { AES, enc } from 'crypto-ts';\n\nexport const hash = (data: string) => {\n  return createHash('md5').update(data).digest('hex');\n};\n\nexport const encryptedHash = (data: string) => {\n  encrypt(hash(data));\n};\n\nexport const decrypt = (cookieLevel: string) => {\n  return AES.decrypt(cookieLevel, process.env.REACT_APP_SALT as string).toString(enc.Utf8);\n};\n\nexport const encrypt = (cookieLevel: string) => {\n  // Rotation\n  return AES.encrypt(cookieLevel, process.env.REACT_APP_SALT as string).toString();\n};\n\n","import { Box, IconButton, TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport TelegramIcon from '@material-ui/icons/Telegram';\nimport React from 'react';\nimport { useCookies } from 'react-cookie';\nimport { Redirect } from 'react-router-dom';\nimport { getRoute, Routes } from '../../navigation/router';\nimport { getCodeValidation } from '../../services/code';\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginLeft: '10px',\n  },\n  typoShare: {\n    margin: theme.spacing(1),\n  },\n  menuButton: {\n    marginLeft: theme.spacing(2),\n  },\n}));\n\ntype CustomHeaderProps = {\n  header: string,\n}\n\nconst CustomHeader = ({ header }: CustomHeaderProps) => {\n  const classes = useStyles();\n  const [cookies, setCookie] = useCookies(['level']);\n  const [code, setCode] = React.useState('');\n  const [isSuccess, setIsSuccess] = React.useState(false);\n  const [nextLevel, setNextLevel] = React.useState('');\n  const [isError, setIsError] = React.useState(false);\n\n  const handleCodeOnChange = (e: React.BaseSyntheticEvent) => {\n    setCode(e.target.value);\n  };\n\n  const handleSubmitCode = () => {\n    //  TODO: should be cross-checked with cookie\n    const codeValidation = getCodeValidation(code, cookies.level);\n    if (codeValidation.isValid) {\n      setIsSuccess(true);\n      setNextLevel(codeValidation.nextLevel!);\n      setCookie('level', codeValidation.nextLevel!);\n    } else {\n      setIsError(true);\n      console.log(isError);\n    }\n  };\n\n  if (isSuccess) {\n    return (<Redirect to={getRoute(nextLevel)}/>);\n  }\n\n  return (\n    <div className={classes.header}>\n      <Typography className={classes.typoShare} variant='h3' color=\"textPrimary\">\n        {header}\n      </Typography>\n      {cookies.level ?\n        (<Box>\n          <TextField autoFocus={true} size='small' id=\"outlined-basic\" label=\"Code\" variant='filled' onChange={handleCodeOnChange}/>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" href={Routes.root} onClick={handleSubmitCode}>\n            <TelegramIcon/>\n          </IconButton>\n        </Box>) : null\n      }\n    </div>\n\n  );\n};\n\nexport default CustomHeader;","import { decrypt, encrypt, hash } from './cryptography';\n\ntype CodeValidation = {\n  isValid: boolean,\n  nextLevel?: string\n}\n\nexport const getCodeValidation = (code: string, encryptedLevel: string): CodeValidation => {\n  const level = decrypt(encryptedLevel);\n\n  const map = new Map()\n    .set('1', 'U2FsdGVkX1/FmRvcW/yMB5KCai+/S0i5hGp2hmJA0UlFnMrmNKHHNQMlgJBqQOGigKOzvq0V9t0Ll0NqjHqbsg==')\n    .set('2', 'U2FsdGVkX1+TE4kmj+79HTGUs34EEscWkgAOElxg9m710/RDfusxdTK1BgsEft0pDFfCP2IogqkR7oVaHHdeqw==');\n\n  if (map.has(level)) {\n    if (hash(code.toLowerCase()) === decrypt(map.get(level))) {\n      const nextLevel = parseInt(level, 10) + 1;\n      return { isValid: true, nextLevel: encrypt(nextLevel.toString()) };\n    }\n  }\n\n  return { isValid: false };\n};\n","import Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { ReactNode } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n  page: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    width: '100%',\n  }\n}));\n\ntype PageContainerProps = {\n  children: ReactNode\n}\n\nconst PageContainer = ({ children }: PageContainerProps) => {\n  const classes = useStyles();\n\n  return (\n    <Container className={classes.page}>\n      {children}\n    </Container>\n  );\n};\n\nexport default PageContainer;","import { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FiberNewIcon from '@material-ui/icons/FiberNew';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport { AES, enc } from 'crypto-ts';\nimport React from 'react';\nimport { useCookies } from 'react-cookie';\nimport { Redirect } from 'react-router-dom';\nimport CustomHeader from '../../components/header/header';\nimport PageContainer from '../../components/pageContainer/pageContainer';\nimport { getRoute, Routes } from '../../navigation/router';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  }\n}));\n\nconst WelcomePage = () => {\n  const classes = useStyles();\n  const [cookies] = useCookies(['level']);\n\n  if (cookies.level) {\n    return (<Redirect to={getRoute(cookies.level)}/>);\n  } else {\n    return (\n      <PageContainer>\n        <CustomHeader header='Welcome'/>\n        <Button\n          className={classes.button}\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"large\"\n          startIcon={<LockOpenIcon/>}\n          href={Routes.root}\n        >\n          {AES.decrypt(AES.encrypt('1', process.env.REACT_APP_SALT as string).toString(), process.env.REACT_APP_SALT as string).toString(enc.Utf8)}\n        </Button>\n        <Button\n          className={classes.button}\n          variant=\"outlined\"\n          color=\"secondary\"\n          size=\"large\"\n          startIcon={<FiberNewIcon/>}\n        >\n          {AES.encrypt('something', process.env.REACT_APP_SALT as string).toString()}\n        </Button>\n      </PageContainer>\n    );\n  }\n};\n\nexport default WelcomePage;","import { Button } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport FiberNewIcon from '@material-ui/icons/FiberNew';\nimport React from 'react';\nimport { useCookies } from 'react-cookie';\nimport CustomHeader from '../components/header/header';\nimport PageContainer from '../components/pageContainer/pageContainer';\nimport { encrypt } from '../services/cryptography';\n\ntype LevelProps = {\n  stage: string\n}\n\nconst Level = ({ stage }: LevelProps) => {\n  const [cookies, setCookie] = useCookies(['level']);\n\n  return (\n    <PageContainer>\n      <CustomHeader header={stage}/>\n      <Typography variant=\"h5\">\n        {cookies.level}\n      </Typography>\n      <Button\n        variant=\"outlined\"\n        color=\"secondary\"\n        size=\"large\"\n        startIcon={<FiberNewIcon/>}\n        onClick={() => setCookie('level', encrypt(stage))}\n      >\n        Sign up\n      </Button>\n    </PageContainer>\n  );\n};\n\nexport default Level;","import Link from '@material-ui/core/Link';\nimport React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\nimport WelcomePage from '../pages/welcome/welcomePage';\nimport { decrypt } from '../services/cryptography';\nimport Level from './level';\n\nconst Router = () => (\n  <HashRouter basename='/'>\n    <Link href={Routes.level1}>\n      Level 1\n    </Link>\n    <Link href={Routes.level2}>\n      Level 2\n    </Link>\n    <Switch>\n      <Route exact path={RouteNames.root} component={WelcomePage}/>\n      <Route path={`/${RouteNames.level1}`} component={() => <Level stage={'1'}/>}/>\n      <Route path={`/${RouteNames.level2}`} component={() => <Level stage={'2'}/>}/>\n      <Route component={WelcomePage}/>\n    </Switch>\n  </HashRouter>\n);\n\nexport const RouteNames = {\n  root: '/',\n  level1: uuidv4(),\n  level2: uuidv4(),\n};\n\nexport const Routes = {\n  root: `#${RouteNames.root}`,\n  level1: `#${RouteNames.level1}`,\n  level2: `#${RouteNames.level2}`,\n};\n\nexport const getRoute = (cryptedLevel: string) => {\n  switch (decrypt(cryptedLevel)) {\n    case '1': {\n      return RouteNames.level1;\n    }\n    case '2': {\n      return RouteNames.level2;\n    }\n    default: {\n      return Routes.root;\n    }\n  }\n};\n\nexport default Router;","import { Button } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InfoIcon from '@material-ui/icons/Info';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport React from 'react';\nimport { useCookies } from 'react-cookie';\nimport { Routes } from '../../navigation/router';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst AppBarLeft = () => {\n  const classes = useStyles();\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [cookies, _, removeCookie] = useCookies(['level']);\n\n  if (cookies.level) {\n    return (\n      <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" href={Routes.root}>\n        <Button\n          className={classes.button}\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          startIcon={<RotateLeftIcon/>}\n          onClick={() => {\n            removeCookie('level');\n          }}\n        >\n          Reset\n        </Button>\n      </IconButton>\n    );\n  } else {\n    return (< InfoIcon/>);\n  }\n};\n\nexport default AppBarLeft;","import AppBar from '@material-ui/core/AppBar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport AppBarLeft from './appBarLeft';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: theme.spacing(2),\n  },\n  toolbar: {\n    justifyContent: 'space-between',\n  },\n}));\n\nconst CustomAppBar = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar className={classes.toolbar}>\n          <Typography variant=\"h5\">\n            Takamaka\n          </Typography>\n          <AppBarLeft/>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default CustomAppBar;","import React from 'react';\nimport { CookiesProvider } from 'react-cookie';\nimport './App.css';\nimport CustomAppBar from './components/appBar/appBar';\nimport Router from './navigation/router';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CookiesProvider>\n        <CustomAppBar/>\n        <header className=\"App-header\">\n          <Router/>\n        </header>\n        <footer className=\"App-footer\">\n          <pre>{process.env.NODE_ENV}</pre>\n          <pre>{process.env.REACT_APP_GIT_SHA}</pre>\n        </footer>\n      </CookiesProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}