{"version":3,"sources":["components/header/header.tsx","components/pageContainer/pageContainer.tsx","pages/welcome/welcomePage.tsx","navigation/level.tsx","navigation/router.tsx","components/appBar/appBarLeft.tsx","components/appBar/appBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","header","width","display","justifyContent","marginLeft","typoShare","margin","spacing","CustomHeader","classes","className","Typography","variant","color","page","flexDirection","alignItems","PageContainer","children","Container","button","WelcomePage","useCookies","cookies","level","to","getRoute","Button","size","startIcon","href","Routes","root","Level","stage","setCookie","onClick","RouteNames","level1","uuidv4","level2","Router","basename","Link","exact","path","component","AppBarLeft","removeCookie","flexGrow","menuButton","marginRight","title","CustomAppBar","AppBar","position","Toolbar","IconButton","edge","aria-label","App","CookiesProvider","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.da2ec389.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'left',\n    marginLeft: '10px',\n  },\n  typoShare: {\n    margin: theme.spacing(1),\n  },\n}));\n\ntype CustomHeaderProps = {\n  header: string,\n}\n\nconst CustomHeader = ({ header }: CustomHeaderProps) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.header}>\n      <Typography className={classes.typoShare} variant='h3' color=\"textPrimary\">\n        {header}\n      </Typography>\n    </div>\n  );\n};\n\nexport default CustomHeader;","import Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { ReactNode } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n  page: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    width: '100%',\n  }\n}));\n\ntype PageContainerProps = {\n  children: ReactNode\n}\n\nconst PageContainer = ({ children }: PageContainerProps) => {\n  const classes = useStyles();\n\n  return (\n    <Container className={classes.page}>\n      {children}\n    </Container>\n  );\n};\n\nexport default PageContainer;","import { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FiberNewIcon from '@material-ui/icons/FiberNew';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport React from 'react';\nimport { useCookies } from 'react-cookie';\nimport { Redirect } from 'react-router-dom';\nimport CustomHeader from '../../components/header/header';\nimport PageContainer from '../../components/pageContainer/pageContainer';\n\nimport { getRoute, Routes } from '../../navigation/router';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  }\n}));\n\nconst WelcomePage = () => {\n  const classes = useStyles();\n  const [cookies] = useCookies(['level']);\n\n  if (cookies.level) {\n    return (<Redirect to={getRoute(cookies.level)}/>);\n  } else {\n    return (\n      <PageContainer>\n        <CustomHeader header='Welcome'/>\n        <Button\n          className={classes.button}\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"large\"\n          startIcon={<LockOpenIcon/>}\n          href={Routes.root}\n        >\n          Sign in\n        </Button>\n        <Button\n          className={classes.button}\n          variant=\"outlined\"\n          color=\"secondary\"\n          size=\"large\"\n          startIcon={<FiberNewIcon/>}\n        >\n          Sign up\n        </Button>\n      </PageContainer>\n    );\n  }\n};\n\nexport default WelcomePage;","import { Button } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport FiberNewIcon from '@material-ui/icons/FiberNew';\nimport React from 'react';\nimport { useCookies } from 'react-cookie';\n\ntype LevelProps = {\n  stage: string\n}\n\nconst Level = ({ stage }: LevelProps) => {\n  const [cookies, setCookie] = useCookies(['level']);\n\n  return (\n    <>\n      <Typography variant=\"h5\">\n        {stage}\n      </Typography>\n      <Typography variant=\"h5\">\n        {cookies.level}\n      </Typography>\n      <Button\n        variant=\"outlined\"\n        color=\"secondary\"\n        size=\"large\"\n        startIcon={<FiberNewIcon/>}\n        onClick={() => setCookie('level', stage)}\n      >\n        Sign up\n      </Button>\n    </>\n  );\n};\n\nexport default Level;","import Link from '@material-ui/core/Link';\nimport React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\nimport WelcomePage from '../pages/welcome/welcomePage';\nimport Level from './level';\n\nconst Router = () => (\n  <HashRouter basename='/'>\n    <Link href={Routes.level1}>\n      Level 1\n    </Link>\n    <Link href={Routes.level2}>\n      Level 2\n    </Link>\n    <Switch>\n      <Route exact path={RouteNames.root} component={WelcomePage}/>\n      <Route path={`/${RouteNames.level1}`} component={() => <Level stage={'level1'}/>}/>\n      <Route path={`/${RouteNames.level2}`} component={() => <Level stage={'level2'}/>}/>\n      <Route component={WelcomePage}/>\n    </Switch>\n  </HashRouter>\n);\n\nexport const RouteNames = {\n  root: '/',\n  level1: uuidv4(),\n  level2: uuidv4(),\n};\n\nexport const Routes = {\n  root: RouteNames.root,\n  level1: `#${RouteNames.level1}`,\n  level2: `#${RouteNames.level2}`,\n};\n\nexport const getRoute = (level: string) => {\n  switch (level) {\n    case 'level1': {\n      return RouteNames.level1;\n    }\n    case 'level2': {\n      return RouteNames.level2;\n    }\n    default: {\n      return Routes.root;\n    }\n  }\n};\n\nexport default Router;","import { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InfoIcon from '@material-ui/icons/Info';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport React from 'react';\nimport { useCookies } from 'react-cookie';\nimport { Routes } from '../../navigation/router';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  }\n}));\n\nconst AppBarLeft = () => {\n  const classes = useStyles();\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [cookies, _, removeCookie] = useCookies(['level']);\n\n  if (cookies.level) {\n    return (\n      <Button\n        className={classes.button}\n        variant=\"contained\"\n        color=\"secondary\"\n        size=\"large\"\n        startIcon={<RotateLeftIcon/>}\n        href={Routes.root}\n        onClick={() => {\n          removeCookie('level');\n        }}\n      >\n        Reset\n      </Button>\n    );\n  } else {\n    return (< InfoIcon/>);\n  }\n};\n\nexport default AppBarLeft;","import AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport React from 'react';\nimport { Routes } from '../../navigation/router';\nimport AppBarLeft from './appBarLeft';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst CustomAppBar = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" href={Routes.root}>\n            <DashboardIcon/>\n          </IconButton>\n          <Typography variant=\"h4\" className={classes.title}>\n            Takamaka\n          </Typography>\n          <AppBarLeft/>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default CustomAppBar;","import React from 'react';\nimport './App.css';\nimport CustomAppBar from './components/appBar/appBar';\nimport { CookiesProvider } from 'react-cookie';\nimport Router from './navigation/router';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CookiesProvider>\n        <CustomAppBar/>\n        <header className=\"App-header\">\n          <Router/>\n        </header>\n        <footer className=\"App-footer\">\n          <pre>{process.env.NODE_ENV}</pre>\n          <pre>{process.env.REACT_APP_GIT_SHA}</pre>\n        </footer>\n      </CookiesProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}